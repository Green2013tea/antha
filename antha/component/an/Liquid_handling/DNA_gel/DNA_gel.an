// example protocol for loading a DNAgel

protocol DNA_gel
import (
	//"LiquidHandler"
	//"Labware"
	//"coldplate"
	//"reagents"
	//"Devices"
	//"strconv"
	"fmt"
	"github.com/antha-lang/antha/antha/anthalib/wtype"
	"github.com/antha-lang/antha/antha/anthalib/mixer"

)
// Input parameters for this protocol (data)
Parameters (
	
	Loadingdyeinsample bool
	Samplenames []string
	Samplenumber int
	Watervol	Volume
	Loadingdyevolume Volume
	DNAgelrunvolume Volume
	
	
	Mixingpolicy string
	
	//DNAladder Volume // or should this be a concentration?

	//DNAgelruntime time.Duration
	//DNAgelwellcapacity Volume
	//DNAgelnumberofwells int32
	//Organism Taxonomy //= http://www.ncbi.nlm.nih.gov/nuccore/49175990?report=genbank
	//Organismgenome Genome
	//Target_DNA wtype.DNASequence
	//Target_DNAsize float64 //Length
	//Runvoltage float64
	//AgarosePercentage Percentage
) // polyerase kit sets key info such as buffer composition, which effects primer melting temperature for example, along with thermocycle parameters

// Data which is returned from this protocol, and data types
Data (
   //	NumberofBands[] int
	//Bandsizes[] Length
	//Bandconc[]Concentration
	//Pass bool
	//PhotoofDNAgel Image
)


// Physical Inputs to this protocol with types
Inputs (
    Water	*wtype.LHComponent
	Sampletotest *wtype.LHComponent//WaterSolution
	Loadingdye *wtype.LHComponent//WaterSolution //Chemspiderlink // not correct link but similar desirable
	InPlate *wtype.LHPlate
	DNAgel *wtype.LHPlate //Gel

	//DNAladder *wtype.LHComponent//NucleicacidSolution
    //Water *wtype.LHComponent//WaterSolution

	//DNAgelbuffer *wtype.LHComponent//WaterSolution
	//DNAgelNucleicacidintercalator *wtype.LHComponent//ToxicSolution // e.g. ethidium bromide, sybrsafe
	//QC_sample *wtype.LHComponent//QC // this is a control
	//DNASizeladder *wtype.LHComponent//WaterSolution
	//Devices.Gelpowerpack Device
) // need to calculate which DNASizeladder is required based on target sequence length and required resolution to distinguish from incorrect assembly possibilities

// Physical outputs from this protocol with types
Outputs (
	Loadedsamples []*wtype.LHSolution//Gel
    //
)

// No special requirements on inputs
Requirements {
    // None
/* QC if negative result should still show band then include QC which will result in band // in reality this may never happen... the primers should be designed within antha too
control blank with no template_DNA */
}

// Condititions run on startup
// Including configuring an controls required, and the blocking level needed
// for them (in this case, per plate of samples processed)
Setup {
	/*control.config.per_DNAgel {
	load DNASizeladder(DNAgelrunvolume) // should run more than one per gel in many cases
	QC := mix (Loadingdye(loadingdyevolume), QC_sample(DNAgelrunvolume-loadingdyevolume))
	load QC(DNAgelrunvolume)
	}*/
}

// The core process for this protocol, with the steps to be performed
// for every input
Steps {

	if len(Samplenames) != Samplenumber{
		panic(fmt.Sprintln("length of sample names:",len(Samplenames), "is not equal to sample number:",Samplenumber))
	}

	loadedsamples := make([]*wtype.LHSolution,0)
	
	
	var DNAgelloadmix *wtype.LHComponent

	Water.Type = "loadwater"
	
	for i:= 0;i < Samplenumber;i++{
	// ready to add water to well
	waterSample := mixer.Sample(Water,Watervol)
	
	// load gel
		if Loadingdyeinsample == false {
		DNAgelloadmixsolution := MixInto(
		DNAgel,
		"",
		mixer.Sample(Loadingdye,Loadingdyevolume),
		mixer.SampleForTotalVolume(Sampletotest,DNAgelrunvolume),
		)
		DNAgelloadmix = wtype.SolutionToComponent(DNAgelloadmixsolution)
		}else {DNAgelloadmix = Sampletotest}

	// Ensure  sample will be dispensed appropriately:

	
	// comment this line out to repeat load of same sample in all wells using first sample name
	DNAgelloadmix.CName = Samplenames[0]//[i] //originalname + strconv.Itoa(i)
	
	// replacing following line with temporary hard code whilst developing protocol:
	DNAgelloadmix.Type = Mixingpolicy	
	//DNAgelloadmix.Type = "loadwater"
	
	loadedsample := MixInto(
	DNAgel,
	"",
	waterSample,
	mixer.Sample(DNAgelloadmix, DNAgelrunvolume),
	)

	loadedsamples = append(Loadedsamples,loadedsample)
}
	Loadedsamples = loadedsamples
	// Then run the gel
	/* DNAgel := electrophoresis.Run(Loadedgel,Runvoltage,DNAgelruntime)

	// then analyse
   	DNAgel.Visualise()
	PCR_product_length = call(assemblydesign_validation).PCR_product_length
	if DNAgel.Numberofbands() == 1
	&& DNAgel.Bandsize(DNAgel[0]) == PCR_product_length {
		Pass = true
		}

	incorrect_assembly_possibilities := assemblydesign_validation.Otherpossibleassemblysizes()

	for _, incorrect := range incorrect_assembly_possibilities {
		if  PCR_product_length == incorrect {
    pass == false
	S := "matches size of incorrect assembly possibility"
	}

	//cherrypick(positive_colonies,recoverylocation)*/
}

// Run after controls and a steps block are completed to
// post process any data and provide downstream results
Analysis {
    // need the control samples to be completed before doing the analysis

    //

}

// A block of tests to perform to validate that the sample was processed correctly
// Optionally, destructive tests can be performed to validate results on a
// dipstick basis
Validation {
  /* 	if calculatedbandsize == expected {
		stop
	}
	if calculatedbandsize != expected {
	if S == "matches size of incorrect assembly possibility" {
		call(assembly_troubleshoot)
		}
	} // loop at beginning should be designed to split labware resource optimally in the event of any failures e.g. if 96well capacity and 4 failures check 96/4 = 12 colonies of each to maximise chance of getting a hit
    }
    if repeat > 2
	stop
    }
    if (recoverylocation doesn't grow then use backup or repeat 
	}
	if sequencingresults do not match expected then use backup or repeat
    // TODO: */
}

//func cherrypick ()
