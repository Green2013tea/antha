protocol RestrictionDigestion_conc

import (
	"github.com/antha-lang/antha/antha/anthalib/mixer"
	"github.com/antha-lang/antha/antha/anthalib/wtype"
	"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/text"
)

// Input parameters for this protocol (data)
Parameters (
	ReactionVolume 				Volume
	BufferConcX					int
	DNAConc 					Concentration
	DNAMassperReaction			Mass
	DNAName						string
	EnzymeNames					[]string
	BSAvol						Volume
	
	StockReConcinUperml 		[]int
	DesiredConcinUperml	 		[]int
	
	ReactionTemp 				Temperature
	ReactionTime 				Time
	InactivationTemp 			Temperature
	InactivationTime 			Time
)

// Physical Inputs to this protocol with types
Inputs (
	DNASolution 		*wtype.LHComponent
	EnzSolutions 		[]*wtype.LHComponent
	BSAoptional		 	*wtype.LHComponent
	Buffer 				*wtype.LHComponent
	Water  				*wtype.LHComponent

	OutPlate 			*wtype.LHPlate
	InPlate 			*wtype.LHPlate
)


// Physical outputs from this protocol with types
Outputs (
	Reaction *wtype.LHComponent
)

// Data which is returned from this protocol, and data types
Data (
)

Requirements {}

// Conditions to run on startup
Setup {}

// The core process for this protocol, with the steps to be performed
// for every input
Steps {
	samples := make([]*wtype.LHComponent, 0)
	waterSample := mixer.SampleForTotalVolume(Water, ReactionVolume)
	samples = append(samples, waterSample)

	// workout volume of buffer to add in SI units
	BufferVol := wunit.NewVolume(float64(ReactionVolume.SIValue()/float64(BufferConcX)),"l")	
	
	bufferSample := mixer.Sample(Buffer, BufferVol)
	samples = append(samples, bufferSample)

	if BSAvol.Mvalue != 0 {bsaSample := mixer.Sample(BSAoptional, BSAvol)
	samples = append(samples, bsaSample)
	}
	
	DNASolution.CName = DNAName
	
	// work out necessary volume to add
	DNAVol := wunit.NewVolume(float64((DNAMassperReaction.SIValue()/DNAConc.SIValue())),"l")
	text.Print("DNAVOL",DNAVol.ToString())
	dnaSample := mixer.Sample(DNASolution, DNAVol)
	samples = append(samples, dnaSample)

	for k, enzyme := range EnzSolutions {
		
		/* 
		e.g. 
		DesiredUinreaction = 1  // U
		StockReConcinUperml = 10000 // U/ml
		ReactionVolume = 20ul
		*/
		stockconcinUperul := StockReConcinUperml[k]/1000
		enzvoltoaddinul := DesiredConcinUperml[k]/stockconcinUperul
		
		var enzvoltoadd Volume
		
		if enzvoltoaddinul < 1 {
			enzvoltoadd = wunit.NewVolume(float64(1),"ul")
			}else {
				enzvoltoadd = wunit.NewVolume(float64(enzvoltoaddinul),"ul")
				}
		enzyme.CName = EnzymeNames[k]
		text.Print("adding enzyme" + EnzymeNames[k], "to" + DNAName)
		enzSample := mixer.Sample(enzyme, enzvoltoadd)
		enzSample.CName = EnzymeNames[k]
		samples = append(samples, enzSample)
	}

	Reaction = MixInto(OutPlate, "", samples...)

	// incubate the reaction mixture
	Incubate(Reaction, ReactionTemp, ReactionTime, false)
	// inactivate
	Incubate(Reaction, InactivationTemp, InactivationTime, false)
}

// Run after controls and a steps block are completed to
// post process any data and provide downstream results
Analysis {
}

// A block of tests to perform to validate that the sample was processed correctly
// Optionally, destructive tests can be performed to validate results on a
// dipstick basis
Validation {
}
