// Variant of Aliquot where the low level MixTo command is used to pipette by
// row  
protocol AliquotTo

import (
	"github.com/antha-lang/antha/antha/anthalib/wtype"
	"github.com/antha-lang/antha/antha/anthalib/wutil"
	"github.com/antha-lang/antha/antha/anthalib/mixer"
	"strconv"
)


// Input parameters for this protocol (data)
Parameters (
	SolutionVolume Volume
	VolumePerAliquot  Volume
	NumberofAliquots int
)

// Data which is returned from this protocol, and data types
Data (
	
)


// Physical Inputs to this protocol with types
Inputs (
	Solution *wtype.LHComponent
	InPlate *wtype.LHPlate
	OutPlate *wtype.LHPlate
)

// Physical outputs from this protocol with types
Outputs (
	Aliquots []*wtype.LHSolution
)

Requirements {
	
}

// Conditions to run on startup
Setup {
	
}

// The core process for this protocol, with the steps to be performed
// for every input
Steps {
	
	number := SolutionVolume.SIValue()/VolumePerAliquot.SIValue()
	possiblenumberofAliquots, _ := wutil.RoundDown(number)
	if possiblenumberofAliquots < NumberofAliquots {
		panic("Not enough solution for this many aliquots")
	}
	
	
	aliquots := make([]*wtype.LHSolution,0)
	
	
	// work out well coordinates for any plate
	wellpositionarray := make([]string, 0)

	
	//alphabet := "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	alphabet := []string{"A", "B", "C", "D", "E", "F", "G", "H", "I", "J",
		"K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X",
		"Y", "Z", "AA", "BB", "CC", "DD", "EE", "FF"}
	//k := 0
	for j := 0; j < OutPlate.WlsY; j++ {
		for i := 0; i < OutPlate.WlsX; i++ { //countingfrom1iswhatmakesushuman := j + 1
			//k = k + 1
			wellposition := string(alphabet[j]) + strconv.Itoa(i+1)
			//fmt.Println(wellposition, k)
			wellpositionarray = append(wellpositionarray, wellposition)
		}

	}
	
	for k := 0; k < NumberofAliquots; k++ {
		if Solution.Type == "dna"{
		Solution.Type = "DoNotMix"
		}
		aliquotSample := mixer.Sample(Solution, VolumePerAliquot)
		aliquot := MixTo(OutPlate,wellpositionarray[k], aliquotSample)
		aliquots = append(aliquots,aliquot)
	}
	Aliquots = aliquots
}
// Run after controls and a steps block are completed to
// post process any data and provide downstream results
Analysis {
}

// A block of tests to perform to validate that the sample was processed correctly
// Optionally, destructive tests can be performed to validate results on a
// dipstick basis
Validation {
	
}

