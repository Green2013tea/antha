// Example protocol demonstrating the use of the Sample function
protocol Ratio

// we need to import the wtype package to use the LHComponent type
// the mixer package is required to use the Sample function
import (
	"fmt"
	"github.com/antha-lang/antha/antha/anthalib/wtype"
	"github.com/antha-lang/antha/antha/anthalib/mixer"
)


// Input parameters for this protocol (data)
Parameters (
  NgRequired float64
  PlasmidConc []float64
//Parts []wtype.DNASequences
  Part []int
  TotalVolume Volume
  Tot []int
  Partnames []string 
WellsUsedPreRun int
)

Data (
	SampleVolumesUsed []Volume
	WellsUsedPostRun int
)

Inputs (
	Inputtype *wtype.LHComponent
	PlateType *wtype.LHPlate
	Buffer *wtype.LHComponent
)

Outputs (
	PooledLib *wtype.LHComponent
	//DNAparts []*wtype.LHComponent
)

Requirements {
}

Setup {
}


Steps {

if len(Part) != len(Tot) || len(Part)!= len(PlasmidConc) || len(Part)!= len(Partnames){
	Errorf(fmt.Sprint("What the hell do you think you're doing these lists aren't equal in size. len(Parts):",len(Part)," len(Partnames):", len(Partnames)))
}

var counter int

counter = WellsUsedPreRun

var wellpositions []string

wellpositions = PlateType.AllWellPositions(wtype.BYCOLUMN)

//var inputname string = Inputtype.CName

Ratio := make([]float64, len(Part))
SampleVolumesUsed = make([]wunit.Volume,0)

samples := make([]*wtype.LHComponent,0)

//Calculate the ratio of part to vtotal vector size and store in a slice, also calculate the sum of all the ratios.
RatioTotal := 0.0
Totalng := 0.0
TotalVol := 0.0

    for i := 0; i < len(Part); i++ {
    Ratio[i] = float64(Part[i]) / float64(Tot[i])
	if Ratio[i]==0{
		Errorf(fmt.Sprint("Ratio of zero for ",Part[i]," / ", Tot[i]) )
	}
    RatioTotal += Ratio[i]
  }

//work out each ratio contribution in terms of ng of plasmid for the required ammount of plasmid (100ng) in the mix (e.g. ratio*100/ratiototal) store in a slice (NgVector)
  NgVector := make([]float64, len(Part))
  for i := 0; i < len(Part); i++ {
  NgVector[i] = Ratio[i] * NgRequired / RatioTotal
  Totalng += NgVector[i]
}

//First add water for DNA to be pipetted into
watersample := mixer.SampleForTotalVolume(Buffer, TotalVolume)
samples = append(samples,watersample)


//From the slice of plasmid concentrations and ng of plasmid required (NgVector) calculate the volume of each plasmid required and store in a 
//slice. If a volume is less that 0.5 ul then multiply all volumes by 200 (arbitrary number for now) 
 
 VolPlasmid := make([]float64, len(Part))
  for i := 0; i < len(Part); i++ {
    VolPlasmid[i] = NgVector[i]/PlasmidConc[i]
    if VolPlasmid[i] < 0.5 {
      VolPlasmid[i] = VolPlasmid[i] * 200
      TotalVol += VolPlasmid[i]
		
		volused := wunit.NewVolume(VolPlasmid[i],"ul")
		SampleVolumesUsed = append(SampleVolumesUsed,volused)
		
		Inputtype.CName = Partnames[i]  
		partSample := mixer.Sample(Inputtype,volused)
		
		samples = append(samples,partSample)
		
		
		
		fmt.Println(VolPlasmid[i])
    }

	
  }

	// Change liquid class of last sample to mix
	
	samples[len(samples)-1].Type = LTDNAMIX

	PooledLib = MixTo(PlateType.Type,wellpositions[counter],1,samples...)
	
	counter++
	
	WellsUsedPostRun = counter
//	DNAparts = samples
	
}

Analysis {
}


Validation {
}
