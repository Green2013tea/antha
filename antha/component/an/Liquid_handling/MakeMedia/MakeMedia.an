protocol MakeMedia

import (
	"github.com/antha-lang/antha/antha/anthalib/mixer"
	"github.com/antha-lang/antha/antha/anthalib/wtype"
	"github.com/antha-lang/antha/antha/anthalib/wtype"
	"fmt"
	"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/text"
	"strconv"
	//"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/enzymes"
	//"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/Inventory"
)

// Input parameters for this protocol (data)
Parameters (
	Name string
	TotalVolume			Volume
	LiqComponentVolumes []Volume
	SolidComponentMasses []wunit.Mass //Volume //Mass // Should be Mass
	SolidComponentDensities []wunit.Density
	PH_setPoint float64
	PH_tolerance float64 //  +/- x  e.g. 7.0 +/- 0.2 
	PH_setPointTemp	wunit.Temperature
	
	//LiqComponentkeys	[]string
	//Solidcomponentkeys	[]string // name or barcode id
	//Acidkey string
	//Basekey string
)

// Physical Inputs to this protocol with types
Inputs (
	Water				*wtype.LHComponent
	LiqComponents		[]*wtype.LHComponent
	SolidComponents		[]*wtype.LHComponent // should be new type or field indicating solid and mass
	/*Acid				*wtype.LHComponent
	Base 				*wtype.LHComponent
	*/
	
	Vessel				*wtype.LHPlate
)


// Physical outputs from this protocol with types
Outputs (
	Media *wtype.LHSolution
)

// Data which is returned from this protocol, and data types
Data (
	Status string
)
// Input Requirement specification
Requirements {
	
	
}

// Conditions to run on startup
Setup {}

// The core process for this protocol, with the steps to be performed
// for every input
Steps {
		recipestring := make([]string,0)
		var step string
		stepcounter := 1 // counting from 1 is what makes us human
		liquids := make([]*wtype.LHComponent,0)
		step = text.Print("Recipe for: ",Name)
		recipestring = append(recipestring,step)
		
		for i, liq := range LiqComponents {
			liqsamp := mixer.Sample(liq,LiqComponentVolumes[i])
			liquids = append(liquids,liqsamp)
			step = text.Print("Step" + strconv.Itoa(stepcounter) + ": ", "add " + LiqComponentVolumes[i].ToString() + " of " + liq.CName)
			recipestring = append(recipestring,step)
			stepcounter++
		}
		
		//solids := make([]*wtype.LHComponent,0)
		
		for k, sol := range SolidComponents {
			solsamp := mixer.SampleSolidtoLiquid(sol,SolidComponentMasses[k],SolidComponentDensities[k])
			liquids = append(liquids,solsamp)
			step = text.Print("Step" + strconv.Itoa(stepcounter) + ": ", "add " + SolidComponentMasses[k].ToString() + " of " + sol.CName)
			recipestring = append(recipestring,step)
			stepcounter = stepcounter + k
		}
		
		watersample := mixer.SampleForTotalVolume(Water,TotalVolume)
		liquids = append(liquids,watersample)
		step = text.Print("Step" + strconv.Itoa(stepcounter) + ": ", "add up to " + TotalVolume.ToString() + " of " + Water.CName)
		recipestring = append(recipestring,step)
		stepcounter++
		
	// Add pH handling functions and driver calls etc...
	
		description:= fmt.Sprint("adjust pH to ", PH_setPoint, " +/-", PH_tolerance, " for temp ",PH_setPointTemp.ToString(), "C")
		step = text.Print("Step" + strconv.Itoa(stepcounter) + ": ", description)
		recipestring = append(recipestring,step)
		stepcounter++
	
	/*
	prepH := MixInto(Vessel,liquids...)
	
	pHactual := prepH.Measure("pH")
	
	step = text.Print("pH measured = ", pHactual)
	recipestring = append(recipestring,step)
	
	//pHactual = wutil.Roundto(pHactual,PH_tolerance)
	
	pHmax := PH_setpoint + PH_tolerance
	pHmin := PH_setpoint - PH_tolerance  
	
	if pHactual < pHmax || pHactual < pHmin {
		// basically just a series of sample, stir, wait and recheck pH
	Media, newph, componentadded = prepH.AdjustpH(PH_setPoint, pHactual, PH_setPointTemp,Acid,Base)
	
	step = text.Print("Adjusted pH = ", newpH)
	recipestring = append(recipestring,step)
	
	step = text.Print("Component added = ", componentadded.Vol + componentadded.Vunit + " of " + componentadded.Conc + componentadded.Cunit + " " + componentadded.CName + )
	recipestring = append(recipestring,step)
	}
	*/
	Media = MixInto(Vessel,liquids...)
	
	Status = fmt.Sprintln(recipestring)
		
}

// Run after controls and a steps block are completed to
// post process any data and provide downstream results
Analysis {
}

// A block of tests to perform to validate that the sample was processed correctly
// Optionally, destructive tests can be performed to validate results on a
// dipstick basis
Validation {
}
/*
type Mole struct {
	number float64
}*/

