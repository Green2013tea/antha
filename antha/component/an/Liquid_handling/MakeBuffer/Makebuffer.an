protocol MakeBuffer

import (
	"github.com/antha-lang/antha/antha/anthalib/mixer"
	"github.com/antha-lang/antha/antha/anthalib/wtype"
	"fmt"
	//"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/enzymes"
	//"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/Inventory"
)

// Input parameters for this protocol (data)
Parameters (
	Buffername string
	Bufferstockvolume Volume
	Bufferstockconc Concentration
	FinalConcentration Concentration
	FinalVolume Volume
	Diluentvolume Volume
	Diluentname string
)

// Physical Inputs to this protocol with types
Inputs (
	Bufferstock		*wtype.LHComponent
	Diluent			*wtype.LHComponent
	OutPlate 		*wtype.LHPlate
	InPlate 		*wtype.LHPlate
)


// Physical outputs from this protocol with types
Outputs (
	Buffer *wtype.LHSolution
)

// Data which is returned from this protocol, and data types
Data (
	Status string
)
// Input Requirement specification
Requirements {
	
	
}

// Conditions to run on startup
Setup {}

// The core process for this protocol, with the steps to be performed
// for every input
Steps {
	//Bufferstockvolume := wunit.NewVolume((FinalVolume.SIValue() * FinalConcentration.SIValue()/Bufferstockconc.SIValue()),"l")
		
	Buffer = MixInto(OutPlate,"",
	mixer.Sample(Bufferstock,Bufferstockvolume),
	mixer.Sample(Diluent,Diluentvolume))

	Status = fmt.Sprintln( "Buffer stock volume = ", Bufferstockvolume.ToString(), "of", Bufferstock.CName,
	"was added to ", Diluentvolume.ToString(), "of", Diluent.CName,
	"to make ", FinalVolume.ToString(), "of", Buffername,
	"Buffer stock conc =",Bufferstockconc.ToString())
		
}

// Run after controls and a steps block are completed to
// post process any data and provide downstream results
Analysis {
}

// A block of tests to perform to validate that the sample was processed correctly
// Optionally, destructive tests can be performed to validate results on a
// dipstick basis
Validation {
}
/*
type Mole struct {
	number float64
}*/

