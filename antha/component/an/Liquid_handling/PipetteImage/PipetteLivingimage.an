// Generates instructions to pipette out a defined image onto a defined plate using a defined palette of colours
protocol PipetteImage_living

import (
	"github.com/antha-lang/antha/antha/anthalib/wtype"
	"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/image"
	"github.com/antha-lang/antha/antha/anthalib/mixer"
	"github.com/antha-lang/antha/microArch/factory"
	"fmt"
)


// Input parameters for this protocol (data)
Parameters (
	VolumePerWell  Volume
	Imagefilename string
	Palettename string
	OnlythisColour string
)

// Data which is returned from this protocol, and data types
Data (
	Numberofpixels int
)


// Physical Inputs to this protocol with types
Inputs (
	//InPlate *wtype.LHPlate
	OutPlate *wtype.LHPlate
)

// Physical outputs from this protocol with types
Outputs (
	 Pixels[]*wtype.LHSolution
)

Requirements {
	
}

// Conditions to run on startup
Setup {
	
}

// The core process for this protocol, with the steps to be performed
// for every input
Steps {
	
	chosencolourpalette := image.AvailablePalettes[Palettename]
	positiontocolourmap, _ := image.ImagetoPlatelayout(Imagefilename, OutPlate, chosencolourpalette) 
	

	// get components from factory
	componentmap := make(map[string]*wtype.LHComponent, 0)

	colourtostringmap := image.AvailableComponentmaps[Palettename]

	for _, colourname := range chosencolourpalette {

		componentname := colourtostringmap[colourname]

		componentmap[componentname] = factory.GetComponentByType(componentname)

	}
	fmt.Println(componentmap)

	solutions := make([]*wtype.LHSolution, 0)

	counter := 0

	for locationkey, colour := range positiontocolourmap {
		
		component := componentmap[colourtostringmap[colour]]

		if component.Type == "dna" {
			component.Type = "DoNotMix"
		}
		fmt.Println(image.Colourcomponentmap[colour])
		
		if OnlythisColour !="" {
	
		if image.Colourcomponentmap[colour] == OnlythisColour{
			counter = counter + 1
			fmt.Println("wells",counter)
		pixelSample := mixer.Sample(component, VolumePerWell)
		solution := MixTo(OutPlate, locationkey, pixelSample)
		solutions = append(solutions, solution)
			}
			
		}else{
			if component.CName !="white"{
			counter = counter + 1
			fmt.Println("wells",counter)
		pixelSample := mixer.Sample(component, VolumePerWell)
		solution := MixTo(OutPlate, locationkey, pixelSample)
		solutions = append(solutions, solution)
		}
		}
	}

	Numberofpixels = len(Pixels)
	fmt.Println("Pixels =",Numberofpixels)
	Pixels = solutions
	
}
// Run after controls and a steps block are completed to
// post process any data and provide downstream results
Analysis {
}

// A block of tests to perform to validate that the sample was processed correctly
// Optionally, destructive tests can be performed to validate results on a
// dipstick basis
Validation {
	
}

