// Generates instructions to pipette out a defined image onto a defined plate using a defined palette of colours
protocol PipetteImage_living

import (
	"github.com/antha-lang/antha/antha/anthalib/wtype"
	"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/image"
	//"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/text"
	"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/search"
	"github.com/antha-lang/antha/antha/anthalib/mixer"
	"github.com/antha-lang/antha/microArch/factory"
	"fmt"
	 "image/color"
)


// Input parameters for this protocol (data)
Parameters (
	VolumePerWell  Volume
	//InoculationVolume Volume
	/*AntibioticVolume Volume
	InducerVolume Volume
	RepressorVolume Volume*/
	Imagefilename string
	Palettename string
	OnlythisColour string
	Notthiscolour string
	UVimage bool
	Rotate bool
	Subset bool
	Subsetnames []string
	//IncTemp Temperature
	//IncTime Time
)

// Data which is returned from this protocol, and data types
Data (
	Numberofpixels int
	UniqueComponents []string
)


// Physical Inputs to this protocol with types
Inputs (
	//InPlate *wtype.LHPlate
	//Media *wtype.LHComponent
	/*Antibiotic *wtype.LHComponent
	Inducer *wtype.LHComponent
	Repressor *wtype.LHComponent*/
	OutPlate *wtype.LHPlate
)

// Physical outputs from this protocol with types
Outputs (
	 Pixels[]*wtype.LHComponent
)

Requirements {
	
}

// Conditions to run on startup
Setup {
	
}

// The core process for this protocol, with the steps to be performed
// for every input
Steps {
	
	// make sub pallete if necessary
	var chosencolourpalette color.Palette
	
	if Subset {
		chosencolourpalette = image.MakeSubPallette(Palettename, Subsetnames)
	}else {
		chosencolourpalette = image.AvailablePalettes[Palettename]
	}
	
	
	UniqueComponents = make([]string,0)
	
	positiontocolourmap, _ := image.ImagetoPlatelayout(Imagefilename, OutPlate, &chosencolourpalette,Rotate) 
	
	colourtostringmap := image.AvailableComponentmaps[Palettename]
	
	if UVimage {
		uvmap := image.AvailableComponentmaps[Palettename]
		visiblemap := image.Visibleequivalentmaps[Palettename]
		
		if Subset {
		uvmap = image.MakeSubMapfromMap(colourtostringmap, Subsetnames)
		visiblemap = image.MakeSubMapfromMap(colourtostringmap, Subsetnames)
		}
		image.PrintFPImagePreview(Imagefilename,OutPlate, Rotate, visiblemap, uvmap)
	}

	// get components from factory
	componentmap := make(map[string]*wtype.LHComponent, 0)
	
	if Subset {
	colourtostringmap = image.MakeSubMapfromMap(colourtostringmap, Subsetnames)
	}

	for colourname, _ := range colourtostringmap {

		componentname := colourtostringmap[colourname]

		componentmap[componentname] = factory.GetComponentByType(componentname)

	}
	fmt.Println(componentmap)

	solutions := make([]*wtype.LHComponent, 0)

	counter := 0

	for locationkey, colour := range positiontocolourmap {
		
		components := make([]*wtype.LHComponent, 0)
		
		component := componentmap[colourtostringmap[colour]]

		/*if component.TypeName() == "dna" {
			component.Type = wtype.LTDoNotMix // "DoNotMix"
		}*/
		
		component.Type = wtype.LTCulture
		
		fmt.Println(image.Colourcomponentmap[colour])
		
		if OnlythisColour !="" {
	
		if image.Colourcomponentmap[colour] == OnlythisColour{
			
			UniqueComponents = append(UniqueComponents,component.CName)
			
			counter = counter + 1
			fmt.Println("wells",OnlythisColour, counter)
		//mediaSample := mixer.SampleForTotalVolume(Media, VolumePerWell)
		//components = append(components,mediaSample)
		/*antibioticSample := mixer.Sample(Antibiotic, AntibioticVolume)
		components = append(components,antibioticSample)
		repressorSample := mixer.Sample(Repressor, RepressorVolume)
		components = append(components,repressorSample)
		inducerSample := mixer.Sample(Inducer, InducerVolume)
		components = append(components,inducerSample)*/
		pixelSample := mixer.Sample(component, VolumePerWell)
		components = append(components,pixelSample)
		solution := MixTo(OutPlate.Type, locationkey, 1,components...)
		
		solutions = append(solutions, solution /*Incubate(solution,IncTemp,IncTime,true)*/)
			}
			
		}else{
			if component.CName !=Notthiscolour{
				
			UniqueComponents = append(UniqueComponents,component.CName)
			
			counter = counter + 1
			fmt.Println("wells not ",Notthiscolour,counter)
		//mediaSample := mixer.SampleForTotalVolume(Media, VolumePerWell)
		//components = append(components,mediaSample)
		/*antibioticSample := mixer.Sample(Antibiotic, AntibioticVolume)
		components = append(components,antibioticSample)
		repressorSample := mixer.Sample(Repressor, RepressorVolume)
		components = append(components,repressorSample)
		inducerSample := mixer.Sample(Inducer, InducerVolume)
		components = append(components,inducerSample)*/
		pixelSample := mixer.Sample(component, VolumePerWell)
		components = append(components,pixelSample)
		solution := MixTo(OutPlate.Type, locationkey, 1, components...)
		
		solutions = append(solutions, solution /*Incubate(solution,IncTemp,IncTime,true)*/)
		}
		}
	}
	
	

	UniqueComponents = search.RemoveDuplicates(UniqueComponents)
	fmt.Println("Unique Components:",UniqueComponents)
	fmt.Println("number of unique components",len(UniqueComponents))
	Pixels = solutions
	
	Numberofpixels = len(Pixels)
	fmt.Println("Pixels =",Numberofpixels)
	
}




// Run after controls and a steps block are completed to
// post process any data and provide downstream results
Analysis {
}

// A block of tests to perform to validate that the sample was processed correctly
// Optionally, destructive tests can be performed to validate results on a
// dipstick basis
Validation {
	
}

