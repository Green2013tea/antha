// Generates instructions to pipette out a defined image onto a defined plate by blending cyan magenta yellow and black dyes
protocol PipetteImage_Gray

import (
	"github.com/antha-lang/antha/antha/anthalib/wtype"
	"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/image"
	"github.com/antha-lang/antha/antha/anthalib/mixer"
	"fmt"
	)


// Input parameters for this protocol (data)
Parameters (
	VolumeForFullcolour  Volume
	Imagefilename string
	MinimumBlackpercentagethreshold float64 // as a proportion of 1 i.e. 0.5 == 50%
	OnlyHighVolumetips bool
)

// Data which is returned from this protocol, and data types
Data (
	Numberofpixels int
)


// Physical Inputs to this protocol with types
Inputs (
	Diluent *wtype.LHComponent
	Black *wtype.LHComponent
	//InPlate *wtype.LHPlate
	OutPlate *wtype.LHPlate
)

// Physical outputs from this protocol with types
Outputs (
	Pixels[]*wtype.LHComponent
)

Requirements {
	
}

// Conditions to run on startup
Setup {
	
}

// The core process for this protocol, with the steps to be performed
// for every input
Steps {
	
	var blackvol Volume
	
	chosencolourpalette := image.AvailablePalettes["Gray"]
	
	positiontocolourmap, _ := image.ImagetoPlatelayout(Imagefilename, OutPlate, &chosencolourpalette) 
	
	solutions := make([]*wtype.LHComponent, 0)

	counter := 0

	for locationkey, colour := range positiontocolourmap {
		
		components := make([]*wtype.LHComponent, 0)

		gray := image.ColourtoGrayscale(colour)
		
		var maxuint8 uint8 = 255	
		
		var minuint8 uint8 
		
		minuint8 = uint8(MinimumBlackpercentagethreshold * float64(maxuint8))
		
		fmt.Println("minuint8",minuint8)
		
		if gray.Y < minuint8 {
		fmt.Println("skipping well:", locationkey)
		continue
			
			}else{
			
		counter = counter + 1
			
			if gray.Y <= maxuint8 {
			watervol := wunit.NewVolume((float64(maxuint8-gray.Y)/float64(maxuint8) * VolumeForFullcolour.RawValue()), VolumeForFullcolour.Unit().PrefixedSymbol())
			fmt.Println(watervol)
			// force hv tip choice
			if OnlyHighVolumetips && watervol.RawValue() < 21 && watervol.Unit().PrefixedSymbol() == "ul"{
				watervol.SetValue(21)
			}
			waterSample := mixer.Sample(Diluent, watervol)
			components = append(components, waterSample)
		}
		
		if gray.Y == maxuint8 {
			blackvol = VolumeForFullcolour
		}else {
		blackvol = wunit.NewVolume((float64(gray.Y)/float64(maxuint8) * VolumeForFullcolour.RawValue()), VolumeForFullcolour.Unit().PrefixedSymbol())
		}
		
		Black.Type = wtype.LiquidTypeFromString("NeedToMix")
		
		fmt.Println("blackvol2",blackvol.ToString())
		if OnlyHighVolumetips && blackvol.RawValue() < 21 && blackvol.Unit().PrefixedSymbol() == "ul"{
				blackvol.SetValue(21)
			}
		blackSample := mixer.Sample(Black, blackvol)
		components = append(components, blackSample)
		
		solution := MixTo(OutPlate.Type, locationkey,1, components...)
		solutions = append(solutions, solution)
		
		}
	}

	Pixels = solutions
	Numberofpixels = len(Pixels)
	fmt.Println("Pixels =",Numberofpixels)

}
// Run after controls and a steps block are completed to
// post process any data and provide downstream results
Analysis {
}

// A block of tests to perform to validate that the sample was processed correctly
// Optionally, destructive tests can be performed to validate results on a
// dipstick basis
Validation {
	
}

