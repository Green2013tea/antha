// Generates instructions to make a pallette of all colours in an image
protocol MakePalette

import (
	"github.com/antha-lang/antha/antha/anthalib/wtype"
	"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/image"
	"github.com/antha-lang/antha/antha/anthalib/mixer"
	"fmt"
	//"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/search"
	"image/color"
	"strconv"
)


// Input parameters for this protocol (data)
Parameters (
	VolumeForFullcolour  Volume
	Imagefilename string
	Rotate bool
	AutoRotate bool
)

// Data which is returned from this protocol, and data types
Data (
	Numberofcolours int
	//Colournames []string
	Palette color.Palette
	ColourtoComponentMap map[string]*wtype.LHComponent
)


// Physical Inputs to this protocol with types
Inputs (
	Cyan *wtype.LHComponent
	Yellow *wtype.LHComponent
	Magenta *wtype.LHComponent
	Black *wtype.LHComponent
	//InPlate *wtype.LHPlate
	OutPlate *wtype.LHPlate
	PalettePlate *wtype.LHPlate
)

// Physical outputs from this protocol with types
Outputs (
	Colours[]*wtype.LHComponent
)

Requirements {
	
}

// Conditions to run on startup
Setup {
	
}

// The core process for this protocol, with the steps to be performed
// for every input
Steps {
	
	//var chosencolourpalette color.Palette
	
	//chosencolourpalette := image.AvailablePalettes["Plan9"] 
	
	//positiontocolourmap, _ := image.ImagetoPlatelayout(Imagefilename, OutPlate, &chosencolourpalette, Rotate) 
	
	// make pallette of colours from image
	chosencolourpalette := image.MakeSmallPalleteFromImage(Imagefilename, OutPlate,Rotate) 
	
	positiontocolourmap, _,_ := image.ImagetoPlatelayout(Imagefilename, OutPlate, &chosencolourpalette, Rotate, AutoRotate) 
	
	// remove duplicates
	positiontocolourmap = image.RemoveDuplicatesValuesfromMap(positiontocolourmap)
	
	//fmt.Println("positions", positiontocolourmap)
	
	solutions := make([]*wtype.LHComponent, 0)
	colourtoComponentMap := make(map[string]*wtype.LHComponent)

	counter := 0


	for _, colour := range positiontocolourmap {
		
		var solution *wtype.LHComponent
		
		colourindex := chosencolourpalette.Index(colour)
		
		if colour != nil {
		//components := make([]*wtype.LHComponent, 0)

		cmyk := image.ColourtoCMYK(colour)
		
		var maxuint8 uint8 = 255		
		
		if cmyk.C ==0 && cmyk.Y == 0 && cmyk.M == 0 && cmyk.K == 0 {
		
		continue
			
			}else{
			
		counter = counter + 1
		
		if cmyk.C > 0{
			
		cyanvol := wunit.NewVolume(((float64(cmyk.C)/float64(maxuint8)) * VolumeForFullcolour.RawValue()), VolumeForFullcolour.Unit().PrefixedSymbol())
		
		if cyanvol.RawValue() < 10 && cyanvol.Unit().PrefixedSymbol() == "ul"{
				cyanvol.SetValue(10)
			}
		
		if cmyk.K == 0 && cmyk.M == 0 && cmyk.Y == 0{
		Cyan.Type  =	wtype.LTNeedToMix
		}else {
		Cyan.Type = wtype.LTDISPENSEABOVE
		}
		
		cyanSample := mixer.Sample(Cyan, cyanvol)
		
		solution = MixInto(PalettePlate, "",cyanSample)
		//solution = MixTo(PalettePlate.Type, position,1,cyanSample)
		
		//components = append(components, cyanSample)
		}
		
		if cmyk.Y > 0{
		yellowvol := wunit.NewVolume(((float64(cmyk.Y)/float64(maxuint8)) * VolumeForFullcolour.RawValue()), VolumeForFullcolour.Unit().PrefixedSymbol())
		
		if yellowvol.RawValue() < 10 && yellowvol.Unit().PrefixedSymbol() == "ul"{
				yellowvol.SetValue(10)
			}
		if cmyk.K == 0 && cmyk.M == 0{
		Yellow.Type  =	wtype.LTNeedToMix
		}else {
		Yellow.Type = wtype.LTDISPENSEABOVE
		}
		
		
		yellowSample := mixer.Sample(Yellow, yellowvol)
		
		if solution != nil {
		solution = Mix(solution, yellowSample)
		}else {
			solution = MixInto(PalettePlate, "", yellowSample)
			//solution = MixTo(PalettePlate.Type, position,1,yellowSample)
		}
		
		
		//components = append(components, yellowSample)
		}
		
		if cmyk.M > 0{
		magentavol := wunit.NewVolume(((float64(cmyk.M)/float64(maxuint8)) * VolumeForFullcolour.RawValue()), VolumeForFullcolour.Unit().PrefixedSymbol())
		
		if magentavol.RawValue() < 10 && magentavol.Unit().PrefixedSymbol() == "ul"{
				magentavol.SetValue(10)
			}
		
		if cmyk.K == 0 {
		Magenta.Type  =	wtype.LTNeedToMix
		}else {
		Magenta.Type = wtype.LTDISPENSEABOVE
		}
		
		magentaSample := mixer.Sample(Magenta, magentavol)
		
		if solution != nil {
		solution = Mix(solution, magentaSample)
		}else {
			solution = MixInto(PalettePlate, "", magentaSample)
			//solution = MixTo(PalettePlate.Type, position,1,magentaSample)
		}
		
		//components = append(components, magentaSample)
		}
		
		if cmyk.K > 0{
		blackvol := wunit.NewVolume(((float64(cmyk.K)/float64(maxuint8)) * VolumeForFullcolour.RawValue()), VolumeForFullcolour.Unit().PrefixedSymbol())
		
		if blackvol.RawValue() < 10 && blackvol.Unit().PrefixedSymbol() == "ul"{
				blackvol.SetValue(10)
			}
		
		Black.Type = wtype.LTNeedToMix
		
		blackSample := mixer.Sample(Black, blackvol)
		
		if solution != nil {
		solution = Mix(solution, blackSample)
		}else {
			solution = MixInto(PalettePlate, "", blackSample)
			//solution = MixTo(PalettePlate.Type, position,1,blackSample)
		}
		
		//components = append(components, blackSample)
		}
		
		//solution := MixInto(PalettePlate, "", components...)
		solutions = append(solutions, solution)
		colourtoComponentMap[strconv.Itoa(colourindex)] = solution
		
		}
		
		}
	}

	Colours = solutions
	Numberofcolours = len(chosencolourpalette)
	Palette = chosencolourpalette
	ColourtoComponentMap = colourtoComponentMap
	fmt.Println("Unique Colours =",Numberofcolours,"from palette:", chosencolourpalette)

}
// Run after controls and a steps block are completed to
// post process any data and provide downstream results
Analysis {
}

// A block of tests to perform to validate that the sample was processed correctly
// Optionally, destructive tests can be performed to validate results on a
// dipstick basis
Validation {
	
}

