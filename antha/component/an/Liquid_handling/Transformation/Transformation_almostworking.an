protocol Transformation_complete

import (
	"github.com/antha-lang/antha/antha/anthalib/wtype"
	"github.com/antha-lang/antha/antha/anthalib/mixer"
)

// Input parameters for this protocol (data)
Parameters (
	CompetentCellvolumeperassembly wunit.Volume //= 50.(uL)
	Reactionvolume wunit.Volume
	Preplasmidtime wunit.Time
	Preplasmidtemp wunit.Temperature
	Postplasmidtime wunit.Time
	Postplasmidtemp wunit.Temperature
	Recoveryvolume wunit.Volume
	Recoverytime wunit.Time //= 2 (hours)
	Recoverytemp wunit.Temperature
	Plateoutvolume wunit.Volume
	//Shakerspeed float64 // correct type?
	
	//Plateoutdilution float64
	
	/*ReactionVolume wunit.Volume
	PartConc wunit.Concentration
	VectorConc wunit.Concentration
	AtpVol wunit.Volume
	ReVol wunit.Volume
	LigVol wunit.Volume
	ReactionTemp wunit.Temperature
	ReactionTime wunit.Time
	InactivationTemp wunit.Temperature
	InactivationTime wunit.Time
	*/
)

// Data which is returned from this protocol, and data types
Data (
)


// Physical Inputs to this protocol with types
Inputs (
	Reaction *wtype.LHComponent
	CompetentCells *wtype.LHComponent
    Recoverymedium *wtype.LHComponent
	OutPlate *wtype.LHPlate
	AgarPlate *wtype.LHPlate
)

// Physical outputs from this protocol with types
Outputs (
	Platedculture *wtype.LHComponent
)

Requirements {
}

// Conditions to run on startup
Setup {
}

// The core process for this protocol, with the steps to be performed
// for every input
Steps {
	competentcells := make([]*wtype.LHComponent,0)
	competentcells = append(competentcells,CompetentCells)
	readycompetentcells := MixInto(OutPlate, "", competentcells...)  // readycompetentcells IS now a LHComponent
	
	readycompetentcellsComp := Incubate (readycompetentcells,Preplasmidtemp, Preplasmidtime, false) // we can incubate an LHComponent so this is fine
	
	competetentcellmix := mixer.Sample(readycompetentcellsComp, CompetentCellvolumeperassembly) // ERROR! mixer.Sample needs a liquid, not an LHComponent! however, the typeIIs method worked with a *wtype.LHComponent from inputs!
	transformationmix := make([]*wtype.LHComponent, 0)
	transformationmix = append(transformationmix, competetentcellmix)
	DNAsample := mixer.Sample(Reaction, Reactionvolume)
	transformationmix = append(transformationmix, DNAsample)
	
	transformedcells := MixInto(OutPlate, "" ,  transformationmix...)
	

	transformedcellsComp := Incubate (transformedcells, Postplasmidtemp, Postplasmidtime,false)

	recoverymix := make([]*wtype.LHComponent, 0)
	recoverymixture := mixer.Sample(Recoverymedium, Recoveryvolume)

	recoverymix = append(recoverymix,transformedcellsComp) // ERROR! transformedcells is now an LHComponent, not a liquid, so can't be used here
	recoverymix = append(recoverymix,recoverymixture)
	recoverymix2 := MixInto(OutPlate, "", recoverymix...)
	
	
	recoverymix2Comp := Incubate (recoverymix2,  Recoverytemp, Recoverytime, true)
	
	plateout := mixer.Sample(recoverymix2Comp, Plateoutvolume) // ERROR! recoverymix2 is now an LHComponent, not a liquid, so can't be used here
	platedculture := MixInto(AgarPlate, "",  plateout)
	
	Platedculture = platedculture
	
	/*atpSample := mixer.Sample(Atp, AtpVol)
	samples = append(samples, atpSample)
	vectorSample := mixer.SampleForConcentration(Vector, VectorConc)
	samples = append(samples, vectorSample)

	for _, part := range Parts {
		partSample := mixer.SampleForConcentration(part, PartConc)
		samples = append(samples, partSample)
	}

	reSample := mixer.Sample(RestrictionEnzyme, ReVol)
	samples = append(samples, reSample)
	ligSample := mixer.Sample(Ligase, LigVol)
	samples = append(samples, ligSample)
	

	// incubate the reaction mixture

	Incubate(reaction, ReactionTemp, ReactionTime, false)

	// inactivate

	Incubate(reaction, InactivationTemp, InactivationTime, false)

	// all done
	Reaction = reaction
	
	readycompetentcells := Incubate (CompetentCells,Preplasmidtemp, Preplasmidtime, false)
	
	
	product := Mix (Reaction(ReactionVolume), readycompetentcells(CompetentCellvolumeperassembly))
	transformedcells := Incubate (product, Postplasmidtime,Postplasmidtemp,false)
	recoverymixture := Mix (transformedcells, Recoverymedium (Recoveryvolume)) // or alternative recovery medium
	Incubate (recoverymixture, Recoverytime, Recoverytemp, Shakerspeed)
	platedculture := MixInto(AgarPlate, Plateoutvolume)
	
	Platedculture = platedculture
	
	*/
}

// Run after controls and a steps block are completed to
// post process any data and provide downstream results
Analysis {
}

// A block of tests to perform to validate that the sample was processed correctly
// Optionally, destructive tests can be performed to validate results on a
// dipstick basis
Validation {
}
