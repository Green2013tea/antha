protocol ScreenLHPolicies

import (
	"github.com/antha-lang/antha/antha/anthalib/wtype"
	"github.com/antha-lang/antha/antha/anthalib/mixer"
	"github.com/antha-lang/antha/microArch/driver/liquidhandling"
	"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/AnthaPath"
	"fmt"
	//"strconv"
)


// Input parameters for this protocol (data)
Parameters (
	TotalVolume Volume
	TestSolVolume  Volume
	NumberofReplicates int
	DXORJMP string
	LHDOEFile string

)

// Data which is returned from this protocol, and data types
Data (
	Status string
)


// Physical Inputs to this protocol with types
Inputs (
	TestSols []*wtype.LHComponent
	Diluent *wtype.LHComponent
	OutPlate *wtype.LHPlate
)

// Physical outputs from this protocol with types
Outputs (
	Reactions []*wtype.LHComponent
)

Requirements {
}

// Conditions to run on startup
Setup {
}

// The core process for this protocol, with the steps to be performed
// for every input
Steps {
	
	
	if anthapath.Anthafileexists(LHDOEFile) == false {
		fmt.Println("This DOE file ", LHDOEFile, " was not found in anthapath ~.antha. Please move it there, change file name and type in antha-lang/antha/microarch/driver/makelhpolicy.go and recompile antha to use this liquidhandling doe design")
		fmt.Println("currently set to ", liquidhandling.DOEliquidhandlingFile, " type ", liquidhandling.DXORJMP)
		}else{
		fmt.Println("found lhpolicy doe file", LHDOEFile)
	}
	
	
	reactions := make([]*wtype.LHComponent,0)
	
	//policies, names := liquidhandling.PolicyMaker(liquidhandling.Allpairs, "DOE_run",false)
	
	//intfactors := []string{"Pre_MIX","POST_MIX"}
	policies, names,err := liquidhandling.PolicyMakerfromDesign(DXORJMP,LHDOEFile, "DOE_run")
	if err != nil{
		panic(err)
	}
	
	for k := 0; k< len(TestSols);k++{
	for j:= 0; j< NumberofReplicates;j++{
	for i := 0; i < len(policies); i++ {
		
		eachreaction := make([]*wtype.LHComponent, 0)
		
		Diluent.Type = wtype.LiquidTypeFromString(names[i])
		fmt.Println(Diluent.Type)
		
		bufferSample := mixer.SampleForTotalVolume(Diluent, TotalVolume)
		eachreaction = append(eachreaction,bufferSample)
		testSample := mixer.Sample(TestSols[k], TestSolVolume)
		eachreaction = append(eachreaction,testSample)
		reaction := MixInto(OutPlate, "",eachreaction...)
		//fmt.Println("where am I?",reaction.Welladdress, reaction.Plateaddress, reaction.PlateID)
		reactions = append(reactions,reaction)
		
	}
	}
	}
	Reactions = reactions
	
}

// Run after controls and a steps block are completed to
// post process any data and provide downstream results
Analysis {
}

// A block of tests to perform to validate that the sample was processed correctly
// Optionally, destructive tests can be performed to validate results on a
// dipstick basis
Validation {
}
