protocol AutoPCR

import (
"github.com/antha-lang/antha/antha/anthalib/wtype"
"github.com/antha-lang/antha/microArch/factory"

)

// Input parameters for this protocol (data)
Parameters (
// PCRprep parameters
Reactiontotemplate map[string]string // e.g. ["left homology arm"]:"templatename"
Reactiontoprimerpair map[string][2]string // e.g. ["left homology arm"]:"fwdprimer","revprimer"
)

// Data which is returned from this protocol, and data types
Data (
)


// Physical Inputs to this protocol with types
Inputs (
FwdPrimertype *wtype.LHComponent
RevPrimertype *wtype.LHComponent
Templatetype *wtype.LHComponent
Plate *wtype.LHPlate
)

// Physical outputs from this protocol with types
Outputs (
Reactions []*wtype.LHComponent
)

Requirements {
}

// Conditions to run on startup
Setup {
}

// The core process for this protocol, with the steps to be performed
// for every input
Steps {
Reactions = make([]*wtype.LHComponent,0)
for reactionname, templatename := range Reactiontotemplate {
result := RunSteps(PCR_vol,
               Parameters{
                    ReactionVolume: wunit.NewVolume(25,"ul"),
          BufferConcinX: 5,
    FwdPrimerName: Reactiontoprimerpair[reactionname][0],
    RevPrimerName: Reactiontoprimerpair[reactionname][1],
    TemplateName: templatename,
    ReactionName: reactionname,
          FwdPrimerVol: wunit.NewVolume(1,"ul"),
          RevPrimerVol: wunit.NewVolume(1,"ul"),
          AdditiveVols: []wunit.Volume{wunit.NewVolume(5,"ul")},
          Templatevolume: wunit.NewVolume(1,"ul"),
          PolymeraseVolume: wunit.NewVolume(1,"ul"),
          DNTPVol:wunit.NewVolume(1,"ul"),
          Numberofcycles: 30 ,
          InitDenaturationtime: wunit.NewTime(30,"s"),
          Denaturationtime: wunit.NewTime(5,"s"),
          Annealingtime: wunit.NewTime(10,"s"),
          AnnealingTemp: wunit.NewTemperature(72,"C"), // Should be calculated from primer and template binding
          Extensiontime: wunit.NewTime(60,"s"), // should be calculated from template length and polymerase rate
          Finalextensiontime: wunit.NewTime(180,"s"),
          Hotstart: false,
          AddPrimerstoMasterMix: false, 
                }, Inputs{
          FwdPrimer:FwdPrimertype,
          RevPrimer: RevPrimertype,
          DNTPS: factory.GetComponentByType("DNTPs") ,
          PCRPolymerase:factory.GetComponentByType("Q5Polymerase"),
          Buffer:factory.GetComponentByType("Q5buffer"),
          Water:factory.GetComponentByType("water"),
          Template: Templatetype,
          Additives: []*wtype.LHComponent{factory.GetComponentByType("GCenhancer")} ,
          OutPlate: Plate,
                        
                })


    Reactions = append(Reactions, result.Outputs.Reaction)
    
    }
}

// Run after controls and a steps block are completed to
// post process any data and provide downstream results
Analysis {
}

// A block of tests to perform to validate that the sample was processed correctly
// Optionally, destructive tests can be performed to validate results on a
// dipstick basis
Validation {
}