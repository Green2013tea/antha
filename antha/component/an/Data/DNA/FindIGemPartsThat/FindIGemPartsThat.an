// example protocol which allows a primitive method for searching the igem registry
// for parts with specified functions or a specified status (e.g. A = available or "Works", or results != none)
// see the igem package ("github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/igem")
// and igem website for more details about how to make the most of this http://parts.igem.org/Registry_API

protocol FindIGemPartsThat

import (
	"github.com/antha-lang/antha/antha/anthalib/wtype"
	"fmt"
	"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/igem"
	"strings"
	"strconv"
	"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/text"
)

// Input parameters for this protocol (data)
Parameters (
	Parttypes			[]string // e.g. rbs, reporter
	Partdescriptions	[]string  // e.g. strong, arsenic, fluorescent, alkane, logic gate
	OnlyreturnAvailableParts bool
	OnlyreturnWorkingparts bool
)

// Physical Inputs to this protocol with types
Inputs (

)

// Physical outputs from this protocol with types
Outputs (
	
)

// Data which is returned from this protocol, and data types
Data (
	Warnings error
	Status string
	FulllistBackupParts [][]string 
	PartMap map[string][]string // i.e. map[description]list of parts matching description
	BiobrickDescriptions map[string]string // i.e. map[biobrickID]description
	HighestRatedMatch string
	HighestRatedMatchDNASequence wtype.DNASequence
)
// Input Requirement specification
Requirements {
	
}

// Conditions to run on startup
Setup {}

// The core process for this protocol, with the steps to be performed
// for every input
Steps {


	BackupParts := make([]string,0)
	status := ""
	joinedstatus := make([]string,0)
	// Look up parts from registry according to properties (this will take a couple of minutes the first time)
	
	parts := make([][]string,0)
	PartMap = make(map[string][]string)
	BiobrickDescriptions = make(map[string]string)
	subparts := make([]string,0)
	var highestrating int
	
	partstatus := ""
	
	if OnlyreturnAvailableParts {
		partstatus = "A"
	} 
	
	// first we'll parse the igem registry based on the short description contained in the fasta header for each part sequence
	for _, desc := range Parttypes {
	
	subparts = igem.FilterRegistry(desc,[]string{desc, partstatus})
	status = text.Print(desc + " :",subparts)
	joinedstatus = append(joinedstatus, status)
	parts = append(parts,subparts)
	PartMap[desc]=subparts
	}
	 
	
	othercriteria := ""
	if OnlyreturnWorkingparts {
		othercriteria = "WORKS"
		}
	
	
	var i int
	
	for desc,subparts := range PartMap {
	
	partdetails := igem.LookUp(subparts)
	
	
	// now we can get detailed information of all of those records to interrogate further
	// this can be slow if there are many parts to check (~2 seconds per block of 14 parts)
	
	
	for _, subpart := range subparts {
		
		if strings.Contains(strings.ToUpper(partdetails.Description(subpart)),strings.ToUpper(Partdescriptions[i])) &&
			strings.Contains(partdetails.Results(subpart), othercriteria) {
			BackupParts = append(BackupParts, subpart)
			BiobrickDescriptions[subpart]= partdetails.Description(subpart)
			
			rating, err := strconv.Atoi(partdetails.Rating(subpart))
			
			if err == nil && rating >highestrating{
			HighestRatedMatch = subpart
			
			seq := partdetails.Sequence(HighestRatedMatch)
			
			HighestRatedMatchDNASequence = wtype.MakeLinearDNASequence(HighestRatedMatch,seq)
			}
		}
		
		
		delete(PartMap,desc)
		PartMap[desc]=BackupParts
		
		FulllistBackupParts = append(FulllistBackupParts,BackupParts)
	}
	i = i + 1
	}
	

	FulllistBackupParts = parts
	Status = strings.Join(joinedstatus," ; ")
	
	
	// Print status
	if Status != "all parts available"{
		Status = fmt.Sprintln(Status)
	} else {Status = fmt.Sprintln(
		"Warnings:", Warnings.Error(),
		"Back up parts found (Reported to work!)", FulllistBackupParts,
		)
		}
	
}

// Run after controls and a steps block are completed to
// post process any data and provide downstream results
Analysis {
}

// A block of tests to perform to validate that the sample was processed correctly
// Optionally, destructive tests can be performed to validate results on a
// dipstick basis
Validation {
}
