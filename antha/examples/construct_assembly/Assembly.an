protocol typeIIsassembly

import (
	"github.com/antha-lang/antha/antha/anthalib/wunit"
	"github.com/antha-lang/antha/antha/anthalib/wtype"
)

// Input parameters for this protocol (data)
Parameters {
	var reactionvolume wunit.Volume
	var partconc wunit.Concentration
	var vectorconc wunit.Concentration
	var atpvol wunit.Volume
	var revol wunit.Volume
	var ligvol wunit.Volume
	var reactiontemp wunit.Temperature
	var reactiontime wunit.Time
	var inactivationtemp wunit.Temperature
	var inactivationtime wunit.Time
}

// Data which is returned from this protocol, and data types
Data {
}


// Physical Inputs to this protocol with types
Inputs {
	var parts []wtype.LHComponent
	var vector wtype.LHComponent
	var restrictionLHComponent wtype.LHComponent
	var buffer wtype.LHComponent
	var ligase wtype.LHComponent
	var atp wtype.LHComponent
	var outplate wtype.LHPlate
}

// Physical outputs from this protocol with types
Outputs {
	var Reactions []wtype.LHSolution
}

Requirements {
}

// Conditions to run on startup
Setup {
}

// The core process for this protocol, with the steps to be performed
// for every input
Steps {
	samples:=make([]*wtype.LHComponent, 0)
	buffersample:=SampleForTotalVolume(buffer,reactionvolume)
	samples=append(samples,buffersample)
	atpsample:=Sample(atp, atpvol)
	samples=append(samples, atpsample)
	for _,part:=range parts{
		partsample:=SampleForConcentration(part, partconc, reactionvolume)
		samples=append(samples, partsample)
	}
	vectorsample:=SampleForConcentration(vector, vectorconc)
	samples=append(samples,vectorsample)
	resample:=Sample(restrictionLHComponent, revol)
	samples=append(samples,resample)
	ligsample:=Sample(ligase, ligvol)
	samples=append(samples,ligsample)
	reaction:=mixinto(outplate, samples...)

	// incubate the reaction mixture

	incubate(reaction, reactionTemp, reactionTime, false)

	// inactivate

	incubate(reaction,inactivationTemp, inactivationTime, false)

	// all done
	Reaction=reaction
}

// Run after controls and a steps block are completed to
// post process any data and provide downstream results
Analysis {
}

// A block of tests to perform to validate that the sample was processed correctly
// Optionally, destructive tests can be performed to validate results on a
// dipstick basis
Validation {
}
