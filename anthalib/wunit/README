Units and measurements:
-----------------------


We define three key types

BaseUnit		interface	defines Name() Symbol() BaseSIConversionFactor()
SIPrefix		struct		defines Name, Value
Measurement		interface	defines Value() RawValue() Unit()

Unit and SIPrefix joined together create a PrefixedUnit type

A Measurement is a float64 value with a PrefixedUnit

We then have the GenericUnit and ConcreteMeasurement structs which define some basic 
receivers on these types

Now this is all fine but doesn't give us any sort of type checking based on units at
compile time

Therefore the above are extended with some further types defining dimensions. The major
dimension types are provided and simply wrap the ConcreteMeasurement class above

A few composite dimensions are also provided although the scope of these is somewhat limited
and there will be areas where it breaks down - for instance volume is defined as a dimension
rather than (as it should be) Length cubed

We therefore have the following additional list -- these are all structs which wrap ConcreteMeasurement 
objects. 

Temperature
Time
Length
Area
Volume
Amount
Mass
Angle
Energy
SubstanceQuantity

Note that there is no way to enforce consistency between the underlying unit and the declared dimension
type, this could use some work but the basic premise is OK

The importance of this is we can define functions over these basic dimensional types and have, e.g., devices
which work on them

