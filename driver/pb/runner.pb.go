// Code generated by protoc-gen-go.
// source: runner.proto
// DO NOT EDIT!

package driver

import proto "github.com/antha-lang/antha/bvendor/github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "github.com/antha-lang/antha/bvendor/golang.org/x/net/context"
	grpc "github.com/antha-lang/antha/bvendor/google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RunRequest struct {
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *RunRequest) Reset()                    { *m = RunRequest{} }
func (m *RunRequest) String() string            { return proto.CompactTextString(m) }
func (*RunRequest) ProtoMessage()               {}
func (*RunRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type RunReply struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *RunReply) Reset()                    { *m = RunReply{} }
func (m *RunReply) String() string            { return proto.CompactTextString(m) }
func (*RunReply) ProtoMessage()               {}
func (*RunReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type MessagesRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *MessagesRequest) Reset()                    { *m = MessagesRequest{} }
func (m *MessagesRequest) String() string            { return proto.CompactTextString(m) }
func (*MessagesRequest) ProtoMessage()               {}
func (*MessagesRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

type MessagesReply struct {
	Values []*MessagesReply_Message `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
}

func (m *MessagesReply) Reset()                    { *m = MessagesReply{} }
func (m *MessagesReply) String() string            { return proto.CompactTextString(m) }
func (*MessagesReply) ProtoMessage()               {}
func (*MessagesReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *MessagesReply) GetValues() []*MessagesReply_Message {
	if m != nil {
		return m.Values
	}
	return nil
}

type MessagesReply_Message struct {
	Code string `protobuf:"bytes,1,opt,name=code" json:"code,omitempty"`
	Seq  int32  `protobuf:"varint,2,opt,name=seq" json:"seq,omitempty"`
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *MessagesReply_Message) Reset()                    { *m = MessagesReply_Message{} }
func (m *MessagesReply_Message) String() string            { return proto.CompactTextString(m) }
func (*MessagesReply_Message) ProtoMessage()               {}
func (*MessagesReply_Message) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3, 0} }

type SupportedRunTypesRequest struct {
}

func (m *SupportedRunTypesRequest) Reset()                    { *m = SupportedRunTypesRequest{} }
func (m *SupportedRunTypesRequest) String() string            { return proto.CompactTextString(m) }
func (*SupportedRunTypesRequest) ProtoMessage()               {}
func (*SupportedRunTypesRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

type SupportedRunTypesReply struct {
	Types []string `protobuf:"bytes,1,rep,name=types" json:"types,omitempty"`
}

func (m *SupportedRunTypesReply) Reset()                    { *m = SupportedRunTypesReply{} }
func (m *SupportedRunTypesReply) String() string            { return proto.CompactTextString(m) }
func (*SupportedRunTypesReply) ProtoMessage()               {}
func (*SupportedRunTypesReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func init() {
	proto.RegisterType((*RunRequest)(nil), "driver.RunRequest")
	proto.RegisterType((*RunReply)(nil), "driver.RunReply")
	proto.RegisterType((*MessagesRequest)(nil), "driver.MessagesRequest")
	proto.RegisterType((*MessagesReply)(nil), "driver.MessagesReply")
	proto.RegisterType((*MessagesReply_Message)(nil), "driver.MessagesReply.Message")
	proto.RegisterType((*SupportedRunTypesRequest)(nil), "driver.SupportedRunTypesRequest")
	proto.RegisterType((*SupportedRunTypesReply)(nil), "driver.SupportedRunTypesReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Runner service

type RunnerClient interface {
	// Run a blob
	Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*RunReply, error)
	// Messages from run (call repeatedly to get more messages)
	Messages(ctx context.Context, in *MessagesRequest, opts ...grpc.CallOption) (*MessagesReply, error)
	// Types of files that can be run
	SupportedRunTypes(ctx context.Context, in *SupportedRunTypesRequest, opts ...grpc.CallOption) (*SupportedRunTypesReply, error)
	// What type of driver am I?
	DriverType(ctx context.Context, in *TypeRequest, opts ...grpc.CallOption) (*TypeReply, error)
}

type runnerClient struct {
	cc *grpc.ClientConn
}

func NewRunnerClient(cc *grpc.ClientConn) RunnerClient {
	return &runnerClient{cc}
}

func (c *runnerClient) Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*RunReply, error) {
	out := new(RunReply)
	err := grpc.Invoke(ctx, "/driver.Runner/Run", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) Messages(ctx context.Context, in *MessagesRequest, opts ...grpc.CallOption) (*MessagesReply, error) {
	out := new(MessagesReply)
	err := grpc.Invoke(ctx, "/driver.Runner/Messages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) SupportedRunTypes(ctx context.Context, in *SupportedRunTypesRequest, opts ...grpc.CallOption) (*SupportedRunTypesReply, error) {
	out := new(SupportedRunTypesReply)
	err := grpc.Invoke(ctx, "/driver.Runner/SupportedRunTypes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) DriverType(ctx context.Context, in *TypeRequest, opts ...grpc.CallOption) (*TypeReply, error) {
	out := new(TypeReply)
	err := grpc.Invoke(ctx, "/driver.Runner/DriverType", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Runner service

type RunnerServer interface {
	// Run a blob
	Run(context.Context, *RunRequest) (*RunReply, error)
	// Messages from run (call repeatedly to get more messages)
	Messages(context.Context, *MessagesRequest) (*MessagesReply, error)
	// Types of files that can be run
	SupportedRunTypes(context.Context, *SupportedRunTypesRequest) (*SupportedRunTypesReply, error)
	// What type of driver am I?
	DriverType(context.Context, *TypeRequest) (*TypeReply, error)
}

func RegisterRunnerServer(s *grpc.Server, srv RunnerServer) {
	s.RegisterService(&_Runner_serviceDesc, srv)
}

func _Runner_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(RunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RunnerServer).Run(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Runner_Messages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(MessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RunnerServer).Messages(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Runner_SupportedRunTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SupportedRunTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RunnerServer).SupportedRunTypes(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Runner_DriverType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(TypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RunnerServer).DriverType(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Runner_serviceDesc = grpc.ServiceDesc{
	ServiceName: "driver.Runner",
	HandlerType: (*RunnerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Run",
			Handler:    _Runner_Run_Handler,
		},
		{
			MethodName: "Messages",
			Handler:    _Runner_Messages_Handler,
		},
		{
			MethodName: "SupportedRunTypes",
			Handler:    _Runner_SupportedRunTypes_Handler,
		},
		{
			MethodName: "DriverType",
			Handler:    _Runner_DriverType_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor1 = []byte{
	// 311 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x52, 0xcb, 0x4e, 0xc3, 0x30,
	0x10, 0x54, 0x1a, 0x1a, 0xda, 0xa5, 0x40, 0xbb, 0xbc, 0xa2, 0x48, 0xa0, 0x92, 0x53, 0x25, 0xa4,
	0x1c, 0x0a, 0x5c, 0xb8, 0xc2, 0x95, 0x8b, 0x81, 0x0f, 0x08, 0xc4, 0x42, 0x95, 0xaa, 0xc4, 0xb5,
	0x9d, 0x4a, 0xfd, 0x06, 0xfe, 0x19, 0xe1, 0xb5, 0xe3, 0x56, 0xa1, 0x85, 0x53, 0x66, 0x27, 0xb3,
	0xa3, 0x99, 0x95, 0x61, 0x20, 0xeb, 0xb2, 0xe4, 0x32, 0x13, 0xb2, 0xd2, 0x15, 0x46, 0x85, 0x9c,
	0x2d, 0xb9, 0x4c, 0x06, 0xee, 0xeb, 0xd8, 0xf4, 0x0e, 0x80, 0xd5, 0x25, 0xe3, 0x8b, 0x9a, 0x2b,
	0x8d, 0x08, 0x7b, 0x7a, 0x25, 0x78, 0x1c, 0x8c, 0x83, 0x49, 0x9f, 0x59, 0x4c, 0x5c, 0x91, 0xeb,
	0x3c, 0xee, 0x18, 0x6e, 0xc0, 0x2c, 0x4e, 0x13, 0xe8, 0xd9, 0x2d, 0x31, 0x5f, 0xe1, 0x11, 0x74,
	0x66, 0x45, 0xb3, 0x61, 0x50, 0x7a, 0x0d, 0xc7, 0xcf, 0x5c, 0xa9, 0xfc, 0x93, 0x2b, 0x6f, 0xfb,
	0x5b, 0xf2, 0x15, 0xc0, 0xe1, 0x46, 0x43, 0x26, 0xf7, 0x10, 0x2d, 0xf3, 0xb9, 0x11, 0x1b, 0x55,
	0x38, 0x39, 0x98, 0x5e, 0x66, 0x4d, 0xca, 0x96, 0xcc, 0x4f, 0xac, 0x11, 0x27, 0x8f, 0xb0, 0xdf,
	0x50, 0x14, 0xf3, 0xa3, 0x2a, 0xd6, 0xd1, 0x09, 0xe3, 0x10, 0x42, 0xc5, 0x17, 0x36, 0x79, 0x97,
	0x11, 0x5c, 0x97, 0x09, 0x5b, 0x65, 0xe2, 0x97, 0x5a, 0x88, 0x4a, 0x6a, 0x5e, 0x98, 0x56, 0xaf,
	0xa6, 0xb4, 0x4f, 0x9e, 0x66, 0x70, 0xbe, 0xe3, 0x1f, 0x25, 0x3e, 0x85, 0x2e, 0x9d, 0xc7, 0x05,
	0xee, 0x33, 0x37, 0x4c, 0xbf, 0x03, 0x88, 0x98, 0xbd, 0x3a, 0xde, 0x40, 0x68, 0x10, 0xa2, 0x6f,
	0xb2, 0x39, 0x73, 0x32, 0x6c, 0x71, 0xe4, 0xf6, 0x00, 0x3d, 0xdf, 0x14, 0x2f, 0xb6, 0xbb, 0xbb,
	0xb5, 0xb3, 0x9d, 0x47, 0xc1, 0x37, 0x18, 0x6d, 0x65, 0xc4, 0xb1, 0xd7, 0xfe, 0x55, 0x2d, 0xb9,
	0xfa, 0x47, 0x41, 0xb6, 0xe6, 0x65, 0x3c, 0x59, 0x01, 0x71, 0x78, 0xe2, 0xd5, 0x34, 0x79, 0x8b,
	0x51, 0x9b, 0x34, 0x5b, 0xef, 0x91, 0x7d, 0x56, 0xb7, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x7b,
	0x51, 0x13, 0x83, 0x7c, 0x02, 0x00, 0x00,
}
