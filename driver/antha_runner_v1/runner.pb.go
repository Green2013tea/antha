// Code generated by protoc-gen-go.
// source: github.com/antha-lang/antha/driver/antha_runner_v1/runner.proto
// DO NOT EDIT!

/*
Package antha_runner_v1 is a generated protocol buffer package.

It is generated from these files:
	github.com/antha-lang/antha/driver/antha_runner_v1/runner.proto

It has these top-level messages:
	RunRequest
	RunRefRequest
	RunReply
	MessagesRequest
	MessagesReply
	SupportedRunTypesRequest
	SupportedRunTypesReply
*/
package antha_runner_v1

import proto "github.com/antha-lang/antha/bvendor/github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import antha_driver_v1 "github.com/antha-lang/antha/driver/antha_driver_v1"

import (
	context "github.com/antha-lang/antha/bvendor/golang.org/x/net/context"
	grpc "github.com/antha-lang/antha/bvendor/google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type RunRequest struct {
	Type string                    `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Data []byte                    `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Done *antha_driver_v1.HttpCall `protobuf:"bytes,3,opt,name=done" json:"done,omitempty"`
}

func (m *RunRequest) Reset()                    { *m = RunRequest{} }
func (m *RunRequest) String() string            { return proto.CompactTextString(m) }
func (*RunRequest) ProtoMessage()               {}
func (*RunRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RunRequest) GetDone() *antha_driver_v1.HttpCall {
	if m != nil {
		return m.Done
	}
	return nil
}

type RunRefRequest struct {
	Type string                    `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Data *antha_driver_v1.HttpCall `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	Done *antha_driver_v1.HttpCall `protobuf:"bytes,3,opt,name=done" json:"done,omitempty"`
}

func (m *RunRefRequest) Reset()                    { *m = RunRefRequest{} }
func (m *RunRefRequest) String() string            { return proto.CompactTextString(m) }
func (*RunRefRequest) ProtoMessage()               {}
func (*RunRefRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RunRefRequest) GetData() *antha_driver_v1.HttpCall {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *RunRefRequest) GetDone() *antha_driver_v1.HttpCall {
	if m != nil {
		return m.Done
	}
	return nil
}

type RunReply struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *RunReply) Reset()                    { *m = RunReply{} }
func (m *RunReply) String() string            { return proto.CompactTextString(m) }
func (*RunReply) ProtoMessage()               {}
func (*RunReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type MessagesRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *MessagesRequest) Reset()                    { *m = MessagesRequest{} }
func (m *MessagesRequest) String() string            { return proto.CompactTextString(m) }
func (*MessagesRequest) ProtoMessage()               {}
func (*MessagesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type MessagesReply struct {
	Values []*MessagesReply_Message `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
}

func (m *MessagesReply) Reset()                    { *m = MessagesReply{} }
func (m *MessagesReply) String() string            { return proto.CompactTextString(m) }
func (*MessagesReply) ProtoMessage()               {}
func (*MessagesReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *MessagesReply) GetValues() []*MessagesReply_Message {
	if m != nil {
		return m.Values
	}
	return nil
}

type MessagesReply_Message struct {
	Code string `protobuf:"bytes,1,opt,name=code" json:"code,omitempty"`
	Seq  int32  `protobuf:"varint,2,opt,name=seq" json:"seq,omitempty"`
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *MessagesReply_Message) Reset()                    { *m = MessagesReply_Message{} }
func (m *MessagesReply_Message) String() string            { return proto.CompactTextString(m) }
func (*MessagesReply_Message) ProtoMessage()               {}
func (*MessagesReply_Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 0} }

type SupportedRunTypesRequest struct {
}

func (m *SupportedRunTypesRequest) Reset()                    { *m = SupportedRunTypesRequest{} }
func (m *SupportedRunTypesRequest) String() string            { return proto.CompactTextString(m) }
func (*SupportedRunTypesRequest) ProtoMessage()               {}
func (*SupportedRunTypesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type SupportedRunTypesReply struct {
	Types []string `protobuf:"bytes,1,rep,name=types" json:"types,omitempty"`
}

func (m *SupportedRunTypesReply) Reset()                    { *m = SupportedRunTypesReply{} }
func (m *SupportedRunTypesReply) String() string            { return proto.CompactTextString(m) }
func (*SupportedRunTypesReply) ProtoMessage()               {}
func (*SupportedRunTypesReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func init() {
	proto.RegisterType((*RunRequest)(nil), "antha.runner.v1.RunRequest")
	proto.RegisterType((*RunRefRequest)(nil), "antha.runner.v1.RunRefRequest")
	proto.RegisterType((*RunReply)(nil), "antha.runner.v1.RunReply")
	proto.RegisterType((*MessagesRequest)(nil), "antha.runner.v1.MessagesRequest")
	proto.RegisterType((*MessagesReply)(nil), "antha.runner.v1.MessagesReply")
	proto.RegisterType((*MessagesReply_Message)(nil), "antha.runner.v1.MessagesReply.Message")
	proto.RegisterType((*SupportedRunTypesRequest)(nil), "antha.runner.v1.SupportedRunTypesRequest")
	proto.RegisterType((*SupportedRunTypesReply)(nil), "antha.runner.v1.SupportedRunTypesReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Runner service

type RunnerClient interface {
	// Run a blob
	Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*RunReply, error)
	// Run a blob identified by reference
	// rpc RunRef(RunRefRequest) returns (RunReply);
	// Messages from run (call repeatedly to get more messages)
	Messages(ctx context.Context, in *MessagesRequest, opts ...grpc.CallOption) (*MessagesReply, error)
	// Types of files that can be run
	SupportedRunTypes(ctx context.Context, in *SupportedRunTypesRequest, opts ...grpc.CallOption) (*SupportedRunTypesReply, error)
	// What type of driver am I?
	DriverType(ctx context.Context, in *antha_driver_v1.TypeRequest, opts ...grpc.CallOption) (*antha_driver_v1.TypeReply, error)
}

type runnerClient struct {
	cc *grpc.ClientConn
}

func NewRunnerClient(cc *grpc.ClientConn) RunnerClient {
	return &runnerClient{cc}
}

func (c *runnerClient) Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*RunReply, error) {
	out := new(RunReply)
	err := grpc.Invoke(ctx, "/antha.runner.v1.Runner/Run", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) Messages(ctx context.Context, in *MessagesRequest, opts ...grpc.CallOption) (*MessagesReply, error) {
	out := new(MessagesReply)
	err := grpc.Invoke(ctx, "/antha.runner.v1.Runner/Messages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) SupportedRunTypes(ctx context.Context, in *SupportedRunTypesRequest, opts ...grpc.CallOption) (*SupportedRunTypesReply, error) {
	out := new(SupportedRunTypesReply)
	err := grpc.Invoke(ctx, "/antha.runner.v1.Runner/SupportedRunTypes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) DriverType(ctx context.Context, in *antha_driver_v1.TypeRequest, opts ...grpc.CallOption) (*antha_driver_v1.TypeReply, error) {
	out := new(antha_driver_v1.TypeReply)
	err := grpc.Invoke(ctx, "/antha.runner.v1.Runner/DriverType", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Runner service

type RunnerServer interface {
	// Run a blob
	Run(context.Context, *RunRequest) (*RunReply, error)
	// Run a blob identified by reference
	// rpc RunRef(RunRefRequest) returns (RunReply);
	// Messages from run (call repeatedly to get more messages)
	Messages(context.Context, *MessagesRequest) (*MessagesReply, error)
	// Types of files that can be run
	SupportedRunTypes(context.Context, *SupportedRunTypesRequest) (*SupportedRunTypesReply, error)
	// What type of driver am I?
	DriverType(context.Context, *antha_driver_v1.TypeRequest) (*antha_driver_v1.TypeReply, error)
}

func RegisterRunnerServer(s *grpc.Server, srv RunnerServer) {
	s.RegisterService(&_Runner_serviceDesc, srv)
}

func _Runner_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(RunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RunnerServer).Run(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Runner_Messages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(MessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RunnerServer).Messages(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Runner_SupportedRunTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SupportedRunTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RunnerServer).SupportedRunTypes(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Runner_DriverType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(antha_driver_v1.TypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RunnerServer).DriverType(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Runner_serviceDesc = grpc.ServiceDesc{
	ServiceName: "antha.runner.v1.Runner",
	HandlerType: (*RunnerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Run",
			Handler:    _Runner_Run_Handler,
		},
		{
			MethodName: "Messages",
			Handler:    _Runner_Messages_Handler,
		},
		{
			MethodName: "SupportedRunTypes",
			Handler:    _Runner_SupportedRunTypes_Handler,
		},
		{
			MethodName: "DriverType",
			Handler:    _Runner_DriverType_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 408 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x53, 0xcd, 0x4e, 0xf2, 0x40,
	0x14, 0x0d, 0xf4, 0x83, 0x0f, 0xee, 0xf7, 0x83, 0x4e, 0x8c, 0x29, 0xd5, 0x18, 0xec, 0xc2, 0x9f,
	0x05, 0x43, 0xc0, 0xb5, 0xba, 0xc0, 0x18, 0x17, 0xba, 0x19, 0xdd, 0x93, 0x81, 0x8e, 0x85, 0xa4,
	0xb6, 0xa5, 0x9d, 0x36, 0x61, 0xe9, 0x3b, 0xf8, 0x4c, 0x3e, 0x97, 0xf3, 0xd3, 0x82, 0x52, 0x40,
	0xe2, 0xee, 0xcc, 0xb9, 0xb7, 0xe7, 0x9e, 0x7b, 0x66, 0x0a, 0xd7, 0xee, 0x84, 0x8f, 0x93, 0x21,
	0x1e, 0x05, 0x2f, 0x1d, 0xea, 0xf3, 0x31, 0x6d, 0x7b, 0xd4, 0x77, 0x35, 0xec, 0x38, 0xd1, 0x24,
	0x65, 0x91, 0x3e, 0x0c, 0xa2, 0xc4, 0xf7, 0x59, 0x34, 0x48, 0xbb, 0x1d, 0x8d, 0x70, 0x18, 0x05,
	0x3c, 0x40, 0x0d, 0x55, 0xc5, 0x19, 0x97, 0x76, 0xad, 0xed, 0x15, 0xf5, 0x41, 0x2a, 0x6a, 0xa4,
	0x15, 0xed, 0x11, 0x00, 0x49, 0x7c, 0xc2, 0xa6, 0x09, 0x8b, 0x39, 0x42, 0xf0, 0x8b, 0xcf, 0x42,
	0x66, 0x96, 0x5a, 0xa5, 0xb3, 0x3a, 0x51, 0x58, 0x72, 0x0e, 0xe5, 0xd4, 0x2c, 0x0b, 0xee, 0x2f,
	0x51, 0x18, 0xb5, 0x05, 0x17, 0xf8, 0xcc, 0x34, 0x04, 0xf7, 0xa7, 0xd7, 0xc4, 0xda, 0x56, 0x26,
	0x9c, 0x76, 0xf1, 0x1d, 0xe7, 0x61, 0x9f, 0x7a, 0x1e, 0x51, 0x6d, 0xf6, 0x6b, 0x09, 0xfe, 0xa9,
	0x29, 0xcf, 0x9b, 0x06, 0xb5, 0x3f, 0x0d, 0xfa, 0x46, 0xf4, 0x07, 0x1e, 0x2c, 0xa8, 0x29, 0x0b,
	0xa1, 0x37, 0x43, 0xff, 0xa1, 0x3c, 0x71, 0xb2, 0xd9, 0x02, 0xd9, 0xc7, 0xd0, 0x78, 0x60, 0x71,
	0x4c, 0x5d, 0x16, 0xe7, 0x06, 0x97, 0x5b, 0xde, 0xc4, 0x0a, 0x8b, 0x1e, 0x29, 0x72, 0x05, 0xd5,
	0x94, 0x7a, 0xa2, 0x59, 0x74, 0x19, 0xc2, 0xc1, 0x09, 0x5e, 0xba, 0x1c, 0xfc, 0xa5, 0x3f, 0x3f,
	0x91, 0xec, 0x2b, 0xab, 0x0f, 0xbf, 0x33, 0x4a, 0xa6, 0x31, 0x0a, 0x9c, 0x79, 0x1a, 0x12, 0xa3,
	0x1d, 0x30, 0x62, 0x36, 0x55, 0x61, 0x54, 0x88, 0x84, 0xf3, 0x8b, 0x30, 0x16, 0x17, 0x21, 0xb6,
	0x32, 0x1f, 0x93, 0x30, 0x0c, 0x22, 0xce, 0x1c, 0xb1, 0xde, 0x93, 0xc8, 0x31, 0x5f, 0xc1, 0xc6,
	0xb0, 0xbf, 0xa2, 0x26, 0xad, 0xef, 0x41, 0x45, 0x26, 0xae, 0x9d, 0xd7, 0x89, 0x3e, 0xf4, 0xde,
	0xcb, 0x50, 0x25, 0xca, 0x3c, 0xba, 0x04, 0x43, 0x20, 0x74, 0x50, 0x58, 0x69, 0xf1, 0x56, 0xac,
	0xe6, 0xea, 0xa2, 0xd4, 0xbf, 0x87, 0x5a, 0xbe, 0x3b, 0x6a, 0x6d, 0x88, 0x45, 0x0b, 0x1d, 0x6d,
	0x0e, 0x0e, 0xb9, 0xb0, 0x5b, 0xd8, 0x03, 0x9d, 0x17, 0x3e, 0x5a, 0x97, 0x83, 0x75, 0xba, 0x4d,
	0xab, 0x1c, 0x74, 0x0b, 0x70, 0xa3, 0x9e, 0x8f, 0xe4, 0xd0, 0x61, 0xe1, 0x45, 0x49, 0x3a, 0x17,
	0xb5, 0xd6, 0x54, 0x85, 0xce, 0xb0, 0xaa, 0x7e, 0xad, 0x8b, 0x8f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xa7, 0x07, 0x99, 0x96, 0xef, 0x03, 0x00, 0x00,
}
