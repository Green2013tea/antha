// Example pancake protocol(recipe).
// Provides instructions on how to make a pancake

protocol pancake

// import nuttin'
import (
	
)

// Input parameters for this protocol (data)
Parameters ( // recipe from http://www.bbc.co.uk/food/recipes/fluffyamericanpancak_74828
    BowlSize Volume = 4.7(L)
    MixSpeed KASMUnit = 2.(KASM) //KASM = KitchenAid Stand Mixer, representing the numbered speeds available
    MixTime Duration = 10(s) //seconds
    FlourMass Mass = 135.(g)
    SugarVolume Volume = 2.(tbsp) // tablespoons
    BakingPowderVolume Volume = 1.(tbsp)
    EggsEach Each = 1.(egg)
    SaltVolume Volume = 0.5(tsp) // teaspoon
    ButterVolume Volume = 2.(tbsp)
    MilkVolume Volume = 130.(mL)
    FryTime Duration = 60.(s)
    FryHeat HeatElementNumber = 5.(HEN) // HEN = Heat Element Number, arbitrarily set at 5
    OneCakeBatterVolume Volume = 60.(mL)
)

// Data which is returned from this protocol, and data types
Data (
    NumberPancakes Number
    BatterVolume Volume
)


// Physical Inputs to this protocol with types
Inputs (
    KitchenAid Mixer
    AllPurposeFlour Flour
    Sugar Sweetener
    BakingPowder Leavener
    Eggs Leavener
    Salt Seasoning
    Butter Fat
    Milk Liquid
)

// Physical outputs from this protocol with types
Outputs (
    ResultantPancake Pancake
)

// No special requirements on inputs
Requirements {
    // Must be delicious
}

// Condititions run on startup
// Including configuring an controls required, and the blocking level needed
// for them (in this case, per plate of samples processed)
Setup {
    NumberPancakes = 0
} 

// The core process for this protocol, with the steps to be performed
// for every input
Steps {
    var batter = mix(AllPurposeFlour(FlourMass) + Sugar(SugarVolume) + BakingPowder(BakingPowderVolume) + Eggs(EggsEach) + Salt(SaltVolume) + Butter(ButterVolume) + Milk(MilkVolume), MixTime, KitchenAid(MixSpeed))
    BatterVolume = human.observe(batter)
    for BatterVolume > 0 {
        BatterVolume = BatterVolume - OneCakeBatterVolume
        ResultantPancake = fry(batter, OneCakeBatterVolume, FryTime, FryHeat)
        NumberPancakes++
    }
}

// Run after controls and a steps block are completed to
// post process any data and provide downstream results
Analysis {
    // None. Pancakes are delicious, everyone knows this.
}

// A block of tests to perform to validate that the sample was processed correctly
// Optionally, destructive tests can be performed to validate results on a
// dipstick basis
Validation {
    if NumberPancakes < 0 {
        panic("Guys, did you forget to make the pancakes?")
    }
    if NumberPancakes >100 {
        warn("Woah baby, that's a lot of pancakes!")
    }
}