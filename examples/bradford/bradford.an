// Example bradford protocol.
// Computes the standard curve from a linear regression
// TODO: implement replicates from parameters
protocol bradford //import "github.com/antha-lang/antha/examples/bradford"

// import the antha PlateReader device, and a third party go library from github
import (
	"PlateReader"
	"github.com/sajari/regression"
)

// Input parameters for this protocol (data)
Parameters (
    SampleVolume Volume = 15.(uL)
    BradfordVolume Volume = 5.(uL)
    ReadFrequency Wavelength = 595.(nm)
    ControlCurvePoints uint32 = 7
    ControlCurveDilutionFactor uint32 = 2
    ReplicateCount uint32 = 1 // Note: 1 replicate means experiment is in duplicate, etc.
)

// Data which is returned from this protocol, and data types
Data (
    SampleAbsorbance Absorbance
    ProteinConc Concentration
    RSquared float32    
    control_absorbance [control_curve_points+1]Absorbance
    control_concentrations [control_curve_points+1]float64
)


// Physical Inputs to this protocol with types
Inputs (
    Sample WaterSolution
    BradfordReagent WaterSolution
    ControlProtein WaterSolution
    DistilledWater WaterSolution
)

// Physical outputs from this protocol with types
Outputs (
    // None
)

// No special requirements on inputs
Requirements {
    // None
}

// Condititions run on startup
// Including configuring an controls required, and the blocking level needed
// for them (in this case, per plate of samples processed)
Setup {
    control.Config(config.per_plate)    

    var control_curve[ControlCurvePoints + 1]WaterSolution

    for i:= 0; i < ControlCurvePoints; i++ {
        go func(i) {
            if (i == ControlCurvePoints) {
                    control_curve[i] = mix(distilled_water(SampleVolume), bradford_reagent(BradfordVolume)) 
                } else {
                    control_curve[i] = serial_dilute(control_protein(SampleVolume), ControlCurvePoints, ControlCurveDilutionFactor, i)
                }
                control_absorbance[i] = plate_reader.read(control_curve[i], ReadFrequency)
        }()
	}
} 

// The core process for this protocol, with the steps to be performed
// for every input
Steps {
    var product = mix(Sample(SampleVolume) + BradfordReagent(BradfordVolume))
    SampleAbsorbance = PlateReader.ReadAbsorbance(product, Wavelength)
}

// Run after controls and a steps block are completed to
// post process any data and provide downstream results
Analysis {
    // need the control samples to be completed before doing the analysis
    control.WaitForCompletion()
    // Need to compute the linear curve y = m * x + c 
    var r regression.Regression
    r.SetObservedName("Absorbance")
    r.SetVarName(0, "Concentration")
    r.AddDataPoint(regression.DataPoint{Observed : ControlCurvePoints+1, Variables : ControlAbsorbance})
    r.AddDataPoint(regression.DataPoint{Observed : ControlCurvePoints+1, Variables : ControlConcentrations})
    r.RunLinearRegression()
    m := r.GetRegCoeff(0)
    c := r.GetRegCoeff(1)
    RSquared = r.Rsquared   

    ProteinConc = (SampleAbsorbance - c) / m
}

// A block of tests to perform to validate that the sample was processed correctly
// Optionally, destructive tests can be performed to validate results on a
// dipstick basis
Validation {
    if SampleAbsorbance > 1 {
        panic("Sample likely needs further dilution")
    }
    if (RSquared < 0.9) {
        warn("Low r_squared on standard curve")
    }
    if (RSquared < 0.7) {
        panic("Bad r_squared on standard curve")
    }
    // TODO: add test of replicate variance
}